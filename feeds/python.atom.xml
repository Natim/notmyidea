<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alexis' log</title><link href="http://blog.notmyidea.org" rel="alternate"></link><link href="http://blog.notmyidea.org/feeds/python.atom.xml" rel="self"></link><id>http://blog.notmyidea.org</id><updated>2011-10-15T00:00:00+02:00</updated><entry><title>How are you handling your shared expenses?</title><link href="http://blog.notmyidea.org/how-are-you-handling-your-shared-expenses.html" rel="alternate"></link><updated>2011-10-15T00:00:00+02:00</updated><author><name>Alexis Métaireau</name></author><id>tag:blog.notmyidea.org,2011-10-15:/how-are-you-handling-your-shared-expenses.html/</id><summary type="html">&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; We're kick-starting a new application to manage your shared
expenses. Have a look at &lt;a class="reference external" href="http://ihatemoney.notmyidea.org"&gt;http://ihatemoney.notmyidea.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a student, I lived in a lot of different locations, and the majority of them
had something in common: I lived with others. It usually was a great experience
(and I think I will continue to live with others). Most of the time, we had to
spend some time each month to compute who had to pay what to the others.&lt;/p&gt;
&lt;p&gt;I wanted to create a pet project using flask, so I wrote a little
(~150 lines) flask application to handle this. It worked out pretty well for my
housemates and me, and as we had to move into different locations,
one of them asked me if he could continue to use it for the year to come.&lt;/p&gt;
&lt;p&gt;I said yes and gave it some more thoughts: We probably aren't the only ones
interested by such kind of software. I decided to extend a bit more the
software to have a concept of projects and persons (the list of persons was
hard-coded in the first time, boooh!).&lt;/p&gt;
&lt;p&gt;I then discussed with a friend of mine, who was excited about it and wanted to learn
python. Great! That's a really nice way to get started. Some more friends were also
interested in it and contributed some features and provided feedback (thanks
&lt;a class="reference external" href="http://www.sneakernet.fr/"&gt;Arnaud&lt;/a&gt; and Quentin!)&lt;/p&gt;
&lt;p&gt;Since that, the project now support multiple languages and provides a REST API
(android and iphone apps in the tubes!), into other things.
There is no need to register for an account or whatnot, just enter a project name,
a secret code and a contact email, invite friends and that's it (this was inspired by
doodle)!&lt;/p&gt;
&lt;img alt="images/ihatemoney.png" src="images/ihatemoney.png" /&gt;
&lt;p&gt;You can try the project at &lt;a class="reference external" href="http://ihatemoney.notmyidea.org"&gt;http://ihatemoney.notmyidea.org&lt;/a&gt; for now, and the
code lives at &lt;a class="reference external" href="https://github.com/spiral-project/ihatemoney/"&gt;https://github.com/spiral-project/ihatemoney/&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="features"&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;p&gt;In the wild, currently, there already are some implementations of this shared
budget manager thing. The fact is that most of them are either hard to use, with
a too much fancy design or simply trying to do too much things at once.&lt;/p&gt;
&lt;p&gt;No, I don't want my budget manager to make my shopping list, or to run a blog for
me, thanks. I want it to let me focus on something else. Keep out of my way.&lt;/p&gt;
&lt;div class="section" id="no-user-registration"&gt;
&lt;h3&gt;No user registration&lt;/h3&gt;
&lt;p&gt;You don't need to register an account on the website to start using it. You
just have to create a project, set a secret code for it, and give both the url and
the code to the people you want to share it with (or the website can poke
them for you).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="keeping-things-simple"&gt;
&lt;h3&gt;Keeping things simple&lt;/h3&gt;
&lt;p&gt;&amp;quot;Keep It Simple, Stupid&amp;quot; really matches our philosophy here: you want to add a
bill? Okay. Just do it. You just have to enter who paid, for who, how much,
and a description, like you would have done when you're back from the
farmer's market on raw paper.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-categories"&gt;
&lt;h3&gt;No categories&lt;/h3&gt;
&lt;p&gt;Some people like to organise their stuff into different &amp;quot;categories&amp;quot;:
leisure, work, eating, etc. That's not something I want (at least to begin
with).&lt;/p&gt;
&lt;p&gt;I want things to be simple. Got that? Great. Just add your bills!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="balance"&gt;
&lt;h3&gt;Balance&lt;/h3&gt;
&lt;p&gt;One of the most useful thing is to know what's your &amp;quot;balance&amp;quot; compared to
others. In other words, if you're negative, you owe money, if you're positive,
you have to receive money. This allows you to dispatch who has to pay for the
next thing, in order to re-equilibrate the balance.&lt;/p&gt;
&lt;p&gt;Additionally, the system is able to compute for you who has to give how
much to who, in order to reduce the number of transactions needed to restore
the balance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="api"&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;p&gt;All of what's possible to do with the standard web interface is also available
through a REST API. I developed a simple REST toolkit for flask for this (and
I should release it!).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="interested"&gt;
&lt;h2&gt;Interested?&lt;/h2&gt;
&lt;p&gt;This project is open source. All of us like to share what we are doing and
would be happy to work with new people and implement new ideas. If you have
a nice idea about this, if you want to tweak it or to fill bugs. Don't hesitate
a second! The project lives at &lt;a class="reference external" href="http://github.com/spiral-project/ihatemoney/"&gt;http://github.com/spiral-project/ihatemoney/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Using dbpedia to get languages influences</title><link href="http://blog.notmyidea.org/using-dbpedia-to-get-languages-influences.html" rel="alternate"></link><updated>2011-08-16T00:00:00+02:00</updated><author><name>Alexis Métaireau</name></author><id>tag:blog.notmyidea.org,2011-08-16:/using-dbpedia-to-get-languages-influences.html/</id><summary type="html">&lt;p&gt;While browsing the Python's wikipedia page, I found information about the languages
influenced by python, and the languages that influenced python itself.&lt;/p&gt;
&lt;p&gt;Well, that's kind of interesting to know which languages influenced others,
it could even be more interesting to have an overview of the connexion between
them, keeping python as the main focus.&lt;/p&gt;
&lt;p&gt;This information is available on the wikipedia page, but not in a really
exploitable format. Hopefully, this information is provided into the
information box present on the majority of wikipedia pages. And… guess what?
there is project with the goal to scrap and index all this information in
a more queriable way, using the semantic web technologies.&lt;/p&gt;
&lt;p&gt;Well, you may have guessed it, the project in question in dbpedia, and exposes
information in the form of RDF triples, which are way more easy to work with
than simple HTML.&lt;/p&gt;
&lt;p&gt;For instance, let's take the page about python:
&lt;a class="reference external" href="http://dbpedia.org/page/Python_%28programming_language%29"&gt;http://dbpedia.org/page/Python_%28programming_language%29&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The interesting properties here are &amp;quot;Influenced&amp;quot; and &amp;quot;InfluencedBy&amp;quot;, which
allows us to get a list of languages. Unfortunately, they are not really using
all the power of the Semantic Web here, and the list is actually a string with
coma separated values in it.&lt;/p&gt;
&lt;p&gt;Anyway, we can use a simple rule: All wikipedia pages of programming languages
are either named after the name of the language itself, or suffixed with &amp;quot;(
programming language)&amp;quot;, which is the case for python.&lt;/p&gt;
&lt;p&gt;So I've built &lt;a class="reference external" href="https://github.com/ametaireau/experiments/blob/master/influences/get_influences.py"&gt;a tiny script to extract the information from dbpedia&lt;/a&gt; and transform them into a shiny graph using graphviz.&lt;/p&gt;
&lt;p&gt;After a nice:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python get_influences.py python dot | dot -Tpng &amp;gt; influences.png
&lt;/pre&gt;
&lt;p&gt;The result is the following graph (&lt;a class="reference external" href="http://files.lolnet.org/alexis/influences.png"&gt;see it directly here&lt;/a&gt;)&lt;/p&gt;
&lt;img alt="http://files.lolnet.org/alexis/influences.png" src="http://files.lolnet.org/alexis/influences.png" style="width: 800px;" /&gt;
&lt;p&gt;While reading this diagram, keep in mind that it is a) not listing all the
languages and b) keeping a python perspective.&lt;/p&gt;
&lt;p&gt;This means that you can trust the scheme by following the arrows from python to
something and from something to python, it is not trying to get the matching
between all the languages at the same time to keep stuff readable.&lt;/p&gt;
&lt;p&gt;It would certainly be possible to have all the connections between all
languages (and the resulting script would be easier) to do so, but the resulting
graph would probably be way less readable.&lt;/p&gt;
&lt;p&gt;You can find the script &lt;a class="reference external" href="https://github.com/ametaireau/experiments"&gt;on my github account&lt;/a&gt;. Feel free to adapt it for
whatever you want if you feel hackish.&lt;/p&gt;
</summary><category term="dbpedia"></category><category term="sparql"></category><category term="python"></category></entry></feed>